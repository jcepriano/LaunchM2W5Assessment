# Mod 2 Week 5 Assessment

Start by Forking this repo.

## Questions (10 Points Possible)

1. In at least two sentences, how would you define what seed data is and why it's useful? (1 point possible)

Seed data is information that a programmer inputs into their database through Entity Framework. It's useful because it allows the programmer to test the functionality of their database.

1. Deleting a database column is a dangerous action, what might happen if you delete a column you didn't mean to? (1 point possible)

If you delete a column that wasn't supposed to be deleted, it could cause some problems withing the database. Such as, a loss of necessary data. Or, more importantly, a different table in the database might rely on the deleted column to function properly.

1. Write out at least 3 steps to describe the process of adding a new column to your database using entity framework. (1 point possible)

1. Go into the class that made the table you want to add to
2. Add a new property to that class with the same name you want the column to be
3. Save it, add a migration, then update the database

1. When I run `Update-Database`, which function in the migration is used `Up` or `Down`? (1 point possible)

The 'Up' function is used when running a migrarion with 'Update-Database'. The 'Down' function is used when reverting a migration.

1. When was Entity Framework Core version 7.0 released? As always, feel free to use google as a resource in answering this question. (1 point possible)

Entity Framework Core version 7.0 was released in November 2022.

1. True or False: When using Entity Framework to create database tables for a many-to-many relationship, you must create a class to represent the join table? Explain your answer. (1 point possible)

This is false. You are able to create a class for a join table and specify the attributes, but it is not necessary. If you attempt to create a many-to-many relationship without a class for the join table, a join table will automaticaly be made for you if the attributes in both classes 
are set up to represent a many-to-many relationship.

1. Replace the ____________s with the code required to create the models required for the following entity relationship diagram. Don't worry about `Routeid` vs `RoutesId` and `Stopid` vs `StopsId`, either is fine. Also, no need to include the `terminus` column. (2 points possible)



<img width="600" alt="Stop and Route ERD" src="https://user-images.githubusercontent.com/11747682/228308854-d2328b8c-32d2-4eb9-aa0d-8a2b3d4c6bfa.png">

```C#
namespace BusTransitApp
    {
        public class Route
        {
            public int Id { get; set; }
            public float Fare { get; set; }
            public List<Stop> Stop { get; set; } = new();
        }
    }

namespace BusTransitApp
    {
        public class Stop
        {
            public int Id { get; set; }
            public string Name { get; set; }
            public List<Route> Route { get; set; } = new();
        }
    }
```


1. Replace the _______________s with the code required to seed at least two `Route` objects and at least two `Stop` objects based on your models above. Make sure that there is a many-to-many relationship between your data. (2 points possible)

```C#
namespace BusTransitApp.Data
{
    public class DataSeeder
    {
        public static void SeedRoutesAndStops(BusTransitContext context)
        {
            if (!context.Route.Any())
            {
                var street1 = new Stop {Name = "Street 1"}
                
                var route = new List<Route>
                {
                    new Route
                    {
                        Fare = 4.99
                        Stop = new List<Stop> {street1}
                    }
                };
                context.Route.AddRange(route)
                context.SaveChanges();
            }
        }
    }
}
```
## Exercise (10 Points Possible)

Clone your forked copy of this repository into Visual Studio.  

In this solution, there is a project that has already been set up using Entity Framework.

**Goal 1**: Create your concert database without changing the models. You will need to modify the project to include your specific postgress password, then create a migration, then update your database.

Delivarable: In your slack message to instructors, include a screenshot of the ERD for your concerts table in pgAdmin to show you have completed this step.

**Goal 2**: Add a performers table to your database. Implement a many-to-many relationship between concerts and performers. It's up to you what fields your performers table includes, but it should have at least 3 fields.

Deliverable: In your slack message to instructors, include a screenshot of the ERD for your concerts and performers tables in pgAdmin to show you have completed this step.

## Extra Challenge (0 Points Possible)

Add some seed data for performers and concerts.

## Submission

When finished:
* Commit your changes in Visual Studio
* Push up to GitHub
* Submit the link to your forked repository in the submission form posted in slack!
